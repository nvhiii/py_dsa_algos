# merge sort

# time:
# n elements to sort
# logn height of there
= O(nlogn)

# space:
# n elements to sort
# logn height
= n + logn = O(n) space

pseudo:
    merge_sort(arr, start, end):
        if (start - end + 1 <= 1):
            return arr
            # this is the case if the split arr is length 1

        middle = (start + end) / 2 # in python, we might need floor division
        merge_sort(arr, start, middle) # first half
        merge_sort(arr, middle + 1, end) # second half

        # merge both sorted branches
        merge(arr, start, middle, end) # this uses temp arrays

        return arr

    pseudo for the merge method:
    def merge(arr, s, m, e):
        L = arr[s : m + 1] # left arr
        R = arr[m + 1 : e + 1] # right arr

        i = 0
        j = 0
        k = s

        while i < len(L) and j < len(R):
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1 # increment left index pointer
            else:
                arr[k] = R[j]
                j += 1
            # k always increment
            k += 1

        # stragglers
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

# time complexity
    O(nlogn)
    why?

    a: because at each step of divide and
    conquer, we split problem into 2, which is
    the inverse of exponentiation, logn.
    When we need to merge however, there is
    O(n) needed to compare 2 branch and iterate
    hence we need to iter over all elements,
    thus getting O(n * logn)

# space complexity
    O(n)