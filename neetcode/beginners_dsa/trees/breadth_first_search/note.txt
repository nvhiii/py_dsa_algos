Breadth First search

- in this search, we go through all nodes on each lvl of a tree
- we use nested loops, but only iterate to each node once, hence o(n) time
- "level order traversal"
- usually implemented iteratively
- each lvl is its own queue

pseudo:

    queue = deque()

    if root:
        queue.append(root) # or queue = deque([root])

    while len(queue) > 0: # or while q
        for i in range(len(queue)):
            curr = queue.popleft()
            if curr.left:
                queue.append(curr.left)
            if curr.right:
                queue.append(curr.right)

